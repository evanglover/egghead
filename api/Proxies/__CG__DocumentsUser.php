<?php

namespace Proxies\__CG__\Documents;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \Documents\User implements \Doctrine\ODM\MongoDB\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Documents\\User' . "\0" . 'id', '' . "\0" . 'Documents\\User' . "\0" . 'email', '' . "\0" . 'Documents\\User' . "\0" . 'password', '' . "\0" . 'Documents\\User' . "\0" . 'nickname', '' . "\0" . 'Documents\\User' . "\0" . 'faction', '' . "\0" . 'Documents\\User' . "\0" . 'description', '' . "\0" . 'Documents\\User' . "\0" . 'salt', '' . "\0" . 'Documents\\User' . "\0" . 'token', '' . "\0" . 'Documents\\User' . "\0" . 'dateCreated', '' . "\0" . 'Documents\\User' . "\0" . 'score', '' . "\0" . 'Documents\\User' . "\0" . 'words', '' . "\0" . 'Documents\\User' . "\0" . 'wordFavs'];
        }

        return ['__isInitialized__', '' . "\0" . 'Documents\\User' . "\0" . 'id', '' . "\0" . 'Documents\\User' . "\0" . 'email', '' . "\0" . 'Documents\\User' . "\0" . 'password', '' . "\0" . 'Documents\\User' . "\0" . 'nickname', '' . "\0" . 'Documents\\User' . "\0" . 'faction', '' . "\0" . 'Documents\\User' . "\0" . 'description', '' . "\0" . 'Documents\\User' . "\0" . 'salt', '' . "\0" . 'Documents\\User' . "\0" . 'token', '' . "\0" . 'Documents\\User' . "\0" . 'dateCreated', '' . "\0" . 'Documents\\User' . "\0" . 'score', '' . "\0" . 'Documents\\User' . "\0" . 'words', '' . "\0" . 'Documents\\User' . "\0" . 'wordFavs'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?string
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail(string $_email): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$_email]);

        parent::setEmail($_email);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword(string $_password): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$_password]);

        parent::setPassword($_password);
    }

    /**
     * {@inheritDoc}
     */
    public function getNickname(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNickname', []);

        return parent::getNickname();
    }

    /**
     * {@inheritDoc}
     */
    public function setNickname($_nickname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNickname', [$_nickname]);

        return parent::setNickname($_nickname);
    }

    /**
     * {@inheritDoc}
     */
    public function getFactions(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFactions', []);

        return parent::getFactions();
    }

    /**
     * {@inheritDoc}
     */
    public function getFaction(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFaction', []);

        return parent::getFaction();
    }

    /**
     * {@inheritDoc}
     */
    public function setFaction(string $_faction): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFaction', [$_faction]);

        parent::setFaction($_faction);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription(string $_description): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$_description]);

        parent::setDescription($_description);
    }

    /**
     * {@inheritDoc}
     */
    public function getSalt(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalt', []);

        return parent::getSalt();
    }

    /**
     * {@inheritDoc}
     */
    public function setSalt(string $_salt): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSalt', [$_salt]);

        parent::setSalt($_salt);
    }

    /**
     * {@inheritDoc}
     */
    public function getToken(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToken', []);

        return parent::getToken();
    }

    /**
     * {@inheritDoc}
     */
    public function setToken(string $_token): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToken', [$_token]);

        parent::setToken($_token);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreated', []);

        return parent::getDateCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreated(\DateTime $_dateCreated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreated', [$_dateCreated]);

        return parent::setDateCreated($_dateCreated);
    }

    /**
     * {@inheritDoc}
     */
    public function getScore(): int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScore', []);

        return parent::getScore();
    }

    /**
     * {@inheritDoc}
     */
    public function incScore(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'incScore', []);

        parent::incScore();
    }

    /**
     * {@inheritDoc}
     */
    public function decScore(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'decScore', []);

        parent::decScore();
    }

    /**
     * {@inheritDoc}
     */
    public function getWords(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWords', []);

        return parent::getWords();
    }

    /**
     * {@inheritDoc}
     */
    public function addWord(\Documents\Word $_word): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addWord', [$_word]);

        parent::addWord($_word);
    }

    /**
     * {@inheritDoc}
     */
    public function getWordFavs(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWordFavs', []);

        return parent::getWordFavs();
    }

    /**
     * {@inheritDoc}
     */
    public function addWordFav(\Documents\Word $_word): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addWordFav', [$_word]);

        parent::addWordFav($_word);
    }

}
